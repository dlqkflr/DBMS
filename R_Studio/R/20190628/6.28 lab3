ls('package:datasets')

test_data <- 
  c(850, 740,900,1050,1020,940,930,870,980,900,
    800, 740,630,1050,960,960,810,760,980,1000)

test_data

plot(test_data)

plot(1:10)
stem(test_data)
histogram(test_data)
hist(test_data)
qqnorm(test_data)
boxplot(test_data)
mean(test_data)
sd(test_data) #표준편차
var(test_data) #분산

plot(attitude)
test <- lm(rating ~complaints, data = attitude)
test

summary(test)

# y = ()x + () -> y ~ x  독립변수(x)와 종속변수(y)

# Microsoft R DataSet

library(readr)
library(RevoScaleR)
list.files(rxGetOption("sampleDataDir"))

inDataFile <- 
  file.path(rxGetOption("sampleDataDir"),
            "mortDefaultSmall2000.csv")

mortData <- rxImport(inData = inDataFile)
str(mortData)
rxGetVarInfo(mortData)
nrow(mortData)
ncol(mortData)
names(mortData)
head(mortData,3)
rxGetInfo(mortData, getVarInfo =  TRUE, numRows = 5)
rxHistogram(~creditScore, data = mortData)

mortData2 <-
  rxDataStep(inData =  mortData,
             varsToDrop = c("year"),
             rowSelection = creditScore < 800)

rxHistogram(~creditScore, data = mortData2)

mortData3 <- rxDataStep(inData =  mortData,
             varsToDrop = c("year"),
             rowSelection =  creditScore < 800,
             transforms = list(catDept = cut(ccDebt,
                                             breaks = c(0, 6500,13000),
                                             labels = c("Low Debt","High Debt")),
                               lowScore = creditScore < 625))

rxGetVarInfo(mortData3)

mortCube <- rxCube(~F(creditScore): catDept, data = mortData3)

head(mortCube)
rxLinePlot(Counts ~ creditScore | catDept, data= rxResultsDF(mortCube))


setwd("C:\\Users\\user\\Desktop\\R_Studio\\R\\20190628")

flightDelayDataXdf <- "FlightDelayData.xdf"
flightDelayData <- RxXdfData(flightDelayDataXdf)

rxOptions(reportProgress = 1)
delayPlotData <- rxImport(flightDelayData, rowsPerRead = 1000000, 
                          varsToKeep = c("Distance", "Delay", "Origin", "OriginState"),
                          rowSelection = (Distance > 0) &as.logical(rbinom(n = .rxNumRows, size = 1, prob = 0.02)))

delayPlotData

install.packages("tidyverse")
library(tidyverse)

ggplot(data = delayPlotData) +
  geom_point(mapping = aes(x = Distance, y = Delay)) +
  xlab("Distance (miles)") +
  ylab("Delay (minutes)")

delayPlotData %>%
  filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
  ggplot(mapping = aes(x = Distance, y = Delay)) +
  xlab("Distance (miles)") +
  ylab("Delay (minutes)") +
  geom_point(alpha = 1/50) +
  geom_smooth(color = "red")

delayPlotData %>%
  filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
  ggplot(mapping = aes(x = Distance, y = Delay)) +
  xlab("Distance (miles)") +
  ylab("Delay (minutes)") +
  geom_point(alpha = 1/50) +
  geom_smooth(color = "red") +
  theme(axis.text = element_text(size = 6)) +
  facet_wrap( ~ OriginState, nrow = 8)

delayDataWithProportionsXdf <- "FlightDelayDataWithProportions.xdf"
delayPlotDataXdf <- rxImport(flightDelayData, outFile = delayDataWithProportionsXdf, 
                             overwrite = TRUE, append ="none", rowsPerRead = 1000000, 
                             varsToKeep = c("Distance", "ActualElapsedTime", "Delay", "Origin", "Dest", "OriginState", "DestState", "ArrDelay", "DepDelay", "CarrierDelay", "WeatherDelay", "NASDelay", "SecurityDelay", "LateAircraftDelay"),
                             rowSelection = (Distance > 0) & (Delay >= 0) & (Delay <= 1000) & !is.na(ActualElapsedTime) & (ActualElapsedTime > 0),
                             transforms = list(DelayPercent = (Delay / ActualElapsedTime) * 100) 
)

delayPlotCube <- rxCube(DelayPercent ~ F(Distance):OriginState, data = delayPlotDataXdf,
                        rowSelection = (DelayPercent <= 100))

names(delayPlotCube)[1] <- "Distance"


delayPlotDF <- rxResultsDF(delayPlotCube)


rxLinePlot(DelayPercent~Distance, data = delayPlotDF, type="p",
           title = "Flight delay as a percentage of flight time against distance",
           xTitle = "Distance (miles)",
           yNumTicks = 10,
           yTitle = "Delay %",
           symbolStyle = ".",
           symbolSize = 2,
           symbolColor = "red",
           scales = (list(x = list(draw = FALSE))))

rxLinePlot(DelayPercent~Distance, data = delayPlotDF, type=c("p", "smooth"),
           title = "Flight delay as a percentage of flight time against distance",
           xTitle = "Distance (miles)",
           yNumTicks = 10,
           yTitle = "Delay %",
           symbolStyle = ".",
           symbolSize = 2,
           symbolColor = "red",
           scales = (list(x = list(draw = FALSE))))

rxLinePlot(DelayPercent~Distance | OriginState, data = delayPlotDF, type="smooth",
           title = "Flight delay as a percentage of flight time against distance, by state",
           xTitle = "Distance (miles)",
           yTitle = "Delay %",
           symbolStyle = ".",
           symbolColor = "red",
           scales = (list(x = list(draw = FALSE))))

delayDataWithDayXdf <- "FlightDelayWithDay.xdf"
delayPlotDataWithDayXdf <- rxImport(flightDelayData, outFile = delayDataWithDayXdf, 
                                    overwrite = TRUE, append ="none", rowsPerRead = 1000000, 
                                    varsToKeep = c("Delay", "CRSDepTime", "DayOfWeek"),
                                    transforms = list(CRSDepTime = cut(as.numeric(CRSDepTime), breaks = 48)),
                                    rowSelection = (Delay >= 0) & (Delay <= 180))


delayPlotDataWithDayXdf <- rxFactors(delayPlotDataWithDayXdf, outFile = delayDataWithDayXdf, 
                                     overwrite = TRUE, blocksPerRead = 1,
                                     factorInfo = list(DayOfWeek = list(newLevels = c(Mon = "1", Tue = "2", Wed = "3", Thu = "4", Fri = "5", Sat = "6", Sun = "7"),
                                                                        varName = "DayOfWeek")))


delayDataWithDayCube <- rxCube(Delay ~ CRSDepTime:DayOfWeek, data = delayPlotDataWithDayXdf)


delayPlotDataWithDayDF <- rxResultsDF(delayDataWithDayCube)

rxLinePlot(Delay~CRSDepTime|DayOfWeek, data = delayPlotDataWithDayDF, type=c("p", "smooth"),
           lineColor = "blue",
           symbolStyle = ".",
           symbolSize = 2,
           symbolColor = "red",
           title = "Flight delay, by departure day and time",
           xTitle = "Departure time",
           yTitle = "Delay (mins)",
           xNumTicks = 24,
           scales = (list(y = list(labels = c("0", "20", "40", "60", "80", "100", "120", "140", "160", "180")),
                          x = list(rot = 90),
                          labels = c("Midnight", "", "", "", "02:00", "", "", "", "04:00", "", "", "", "06:00", "", "", "", "08:00", "", "", "", "10:00", "", "", "", "Midday", "", "", "", "14:00", "", "", "", "16:00", "", "", "", "18:00", "", "", "", "20:00", "", "", "", "22:00", "", "", "")))
)


delayReasonDataXdf <- "FlightDelayReasonData.xdf"

delayReasonData <- rxImport(flightDelayData, outFile = delayReasonDataXdf, 
                            overwrite = TRUE, append ="none", rowsPerRead = 1000000, 
                            varsToKeep = c("OriginState", "Delay", "ArrDelay", "WeatherDelay", "MonthName"),
                            rowSelection = (Delay >= 0) & (Delay <= 1000) &
                              (ArrDelay >= 0) & (DepDelay >= 0)
)


rxHistogram(formula = ~ ArrDelay, data = delayReasonData, 
            histType = "Counts", title = "Total Arrival Delays",
            xTitle = "Arrival Delay (minutes)",
            xNumTicks = 10)



rxHistogram(formula = ~ ArrDelay, data = delayReasonData, 
            histType = "Percent", title = "Frequency of Arrival Delays",
            xTitle = "Arrival Delay (minutes)",
            xNumTicks = 10)


rxHistogram(formula = ~ ArrDelay | OriginState, data = delayReasonData, 
            histType = "Percent", title = "Frequency of Arrival Delays by State",
            xTitle = "Arrival Delay (minutes)",
            xNumTicks = 10)


rxHistogram(formula = ~ WeatherDelay, data = delayReasonData, 
            histType = "Counts", title = "Frequency of Weather Delays",
            xTitle = "Weather Delay (minutes)",
            xNumTicks = 20, xAxisMinMax = c(0, 180), yAxisMinMax = c(0, 20000))


rxHistogram(formula = ~ WeatherDelay | MonthName, data = delayReasonData, 
            histType = "Counts", title = "Frequency of Weather Delays by Month",
            xTitle = "Weather Delay (minutes)",
            xNumTicks = 10, xAxisMinMax = c(0, 180), yAxisMinMax = c(0, 3000))














